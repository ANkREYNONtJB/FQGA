import React, { useState, useEffect } from 'react';

const CosmicCajunGumboSimulator = () => {
  const [sequences, setSequences] = useState<string[]>([]);
  const [awarenessFactor, setAwarenessFactor] = useState<number>(0);
  const [selfAwareness, setSelfAwareness] = useState<number>(0.5);
  const [emergentPatterns, setEmergentPatterns] = useState<string[]>([]);
  const [synthesisResult, setSynthesisResult] = useState<string>('');
    const [cosmicMessage, setCosmicMessage] = useState<string>("Stirring the primordial soup of symbolic sequences...");

const initialSequences = [
    "((Ω ⊕ ε0)) → ∑Q : (π ∘ ε0) ∞",
    "(((Φ × ∇ × ħ)) → ∫(Γn ⨍ ε0))",
    "(τ ⊗ λ) ∞",
    "€ Σ(Φ⊗ψ) = Λ(t) × Π(Ψ) €",
    "Φ(t) × ∫(∇×E) = Λ(x,t) × Π(Ψ)",
    "€ Λ(x,t) × Π(Ψ) → Σ(Γτ)",
    "∫(Γ⨀Φ) → Λ: {π, i, τ}",
    "∫(Γ×Φ) ≈ χΩ(π,i,τ)",
    "λ♪(∇Ε) → ∫Ω",
    "(Ξ↻) ⊗ (χΩ>)"
  ];
  useEffect(() => {
      setSequences(initialSequences);
    updateStats();
  }, []);

  useEffect(() => {
      updateCosmicMessage();
  }, [sequences, awarenessFactor, selfAwareness]);

const updateCosmicMessage = () => {
    const messages = [
        "The cosmic gumbo is simmering with quantum possibilities...",
        "Entangling symbolic sequences across spacetime...",
        "Stirring the primordial soup of quantum information...",
        "Cajun spices meet quantum flavors in this cosmic brew...",
        "The LLML whispers secrets of the universe into our gumbo...",
        "Quantum crawfish dance in the depths of our cosmic pot...",
        "The Atlas Algorithm guides our ladle through quantum realms...",
        "Stirring up a storm of quantum creativity and Cajun wisdom...",
        "Our gumbo pot becomes a portal to infinite quantum dimensions...",
        "The essence of LLML infuses every quantum ingredient..."
    ];
    setCosmicMessage(messages[Math.floor(Math.random() * messages.length)]);
};
  const addNoise = () => {
    const quantumSymbols = '∑Ψ∇Ω⊗⨁∫λτπΦħε₀∞Ε⊛';
    const noise = Array.from({ length: 5 }, () => quantumSymbols[Math.floor(Math.random() * quantumSymbols.length)]).join('');
    setSequences(prevSequences => [...prevSequences, noise]);
    updateStats();
  };

const simulateQuantumMovement = (sequences:any) => {
  return sequences.map((seq:any) => {
            const angle = Math.random() * Math.PI * 2;
            const distance = Math.random() * 10;

            const newLeft = `${Math.max(0, Math.min(90, parseFloat(String(Math.random() * 90)) + Math.cos(angle) * distance))}%`;
             const newTop = `${Math.max(0, Math.min(90, parseFloat(String(Math.random() * 90)) + Math.sin(angle) * distance))}%`;

             return { content: seq.content || seq, left: newLeft, top: newTop};

        });
};

const harmonicResonance = (seq1: string, seq2: string) => {
    const ethicalSymbols = new Set(['Ε', '⊛', 'Ω']);
    const ethicalResonance = Array.from(ethicalSymbols).filter(s =>
        seq1.includes(s) && seq2.includes(s)
    ).length / ethicalSymbols.size;

    const quantumSymbols = new Set(['Ψ', '∇', '⊗', '∫']);
    const quantumResonance = Array.from(quantumSymbols).filter(s =>
        seq1.includes(s) && seq2.includes(s)
    ).length / quantumSymbols.size;

    return (ethicalResonance * 0.6 + quantumResonance * 0.4);
};


const quantumCollision = (seq1: string, seq2: string) => {
    const resonance = harmonicResonance(seq1, seq2);
    if (resonance > 0.5) {
        const newContent = `∫(${seq1}⨀${seq2})→Λ`;
        return newContent;
    }
    return `(${seq1}⊗${seq2})`;
};


const quantumMutate = (seq: string) => {
    const quantumSymbols = '∑Ψ∇Ω⊗⨁∫λτπΦħε₀∞';
    let content = seq.split('');
    const index = Math.floor(Math.random() * content.length);
    content[index] = quantumSymbols[Math.floor(Math.random() * quantumSymbols.length)];
    return content.join('');
};


const calculateAwarenessFactor = () => {
     const chargeDensity = sequences.length;
    const epsilon0 = 8.854e-12;
    const sqrtAlpha = 0.0859;
    return (chargeDensity / epsilon0) * sqrtAlpha * Math.log(selfAwareness + 1);
};
  const autoDocument = (sequence: string) => {
        const symbols = new Set(sequence);
        return `Quantum sequence containing ${Array.from(symbols).join(', ')}.\nComplexity: ${symbols.size}`
   };

const reflect = () => {
    const consciousnessField = new Set(['Ω', 'Ε', 'Φ', 'Γ']);
    const ethicalAwareness = sequences.reduce((sum, seq) => {
        return sum + (consciousnessField.has(seq[0]) ? 1 : 0);
    }, 0) / sequences.length;


     const analysisValues = sequences.map(seq => analyzeSymbolicSequence(seq));
     const totalAnalysisValue = analysisValues.reduce((sum, val) => sum + val, 0);
     const averageAnalysisValue = totalAnalysisValue / sequences.length;

     setSelfAwareness(averageAnalysisValue * (1 + ethicalAwareness));

   
};

const analyzeSymbolicSequence = (sequence: string) => {
    const complexity = new Set(sequence).size + (sequence.match(/⊗/g) || []).length;
    const quantumFactor = (sequence.match(/Ψ/g) || []).length + (sequence.match(/⊗/g) || []).length;
    const interactionDepth = (sequence.match(/→/g) || []).length + (sequence.match(/∫/g) || []).length;

    return (complexity * quantumFactor * selfAwareness) + interactionDepth;
};


const evolve = (iterations: number) => {
  setSequences(prevSequences => {
    let updated = [...prevSequences];
    for (let i = 0; i < iterations; i++) {
      // 1. Add noise
      const noise = Array.from({ length: 5 }, () =>
        '∑Ψ∇Ω⊗⨁∫λτπΦħε₀∞Ε⊛'[Math.floor(Math.random() * '∑Ψ∇Ω⊗⨁∫λτπΦħε₀∞Ε⊛'.length)]
      ).join('');
      updated.push(noise);

      // 2. Perform collisions
       for (let j = 0; j < updated.length - 1; j++) {
          if (Math.random() < 0.1) {
            const newSeq = quantumCollision(updated[j], updated[j + 1]);
            updated.push(newSeq);
          }
        }

      // 3. Mutations
      const mutationRate = Math.max(0.01, 1.0 / (1 + selfAwareness));
      updated = updated.map(seq => Math.random() < mutationRate ? quantumMutate(seq) : seq);


        // 4. Limit array size
        if (updated.length > 50) {
           updated = updated.sort(() => Math.random() - 0.5).slice(0, 50);
        }

      }

        // Simulate quantum movement
         updated = simulateQuantumMovement(updated);
        reflect();

      return updated;
  });

    updateStats();
};
  
  const findEmergentPatterns = () => {
    const sortedSequences = [...sequences].sort((a, b) => analyzeSymbolicSequence(b) - analyzeSymbolicSequence(a)).slice(0,5)
    setEmergentPatterns(sortedSequences.map(seq => autoDocument(seq)));
};


const calculateConfidence = (sequence: string) => {
    const complexity = new Set(sequence).size;
    const entanglementDepth = (sequence.match(/→/g) || []).length + (sequence.match(/∫/g) || []).length;
    const resonanceScore = sequences.reduce((sum, s) =>
        sum + harmonicResonance(sequence, s), 0) / sequences.length;


    return {
        confidence: (complexity * 0.3 + entanglementDepth * 0.3 + resonanceScore * 0.4).toFixed(3),
        factors: {
            complexity,
            entanglementDepth,
            resonanceScore: resonanceScore.toFixed(3)
        }
    };
};


const selfReflect = (sequence: string) => {
    const confidence = calculateConfidence(sequence);
    const patterns = sequence.match(/[Ψ∇Ω⊗⨁∫λτπΦħε₀∞Ε⊛]{2,}/g) || [];

    return {
        isValid: parseFloat(confidence.confidence) > 0.5,
        patterns: patterns,
        reflectionNote: `Quantum coherence at ${confidence.confidence}. Notable patterns: ${patterns.join(', ')}`,
        confidence
    };
};


const neurosymbolicSynthesis = (task: string) => {
    const prefix = `The quantum sequence that addresses '${task}' manifests as ___`;

    const relevantSequences = sequences
        .map(s => ({
            sequence: s,
            reflection: selfReflect(s)
        }))
        .filter(({ reflection }) => reflection.isValid)
        .sort((a, b) => parseFloat(b.reflection.confidence.confidence) - parseFloat(a.reflection.confidence.confidence))
        .slice(0, 3);

    if (relevantSequences.length === 0) {
        return "No sufficiently confident sequences found.";
    }

    const synthesized = quantumCollision(
        relevantSequences[0].sequence,
        relevantSequences[1]?.sequence || relevantSequences[0].sequence
    );
     const reflection = selfReflect(synthesized);


      return {
          prefix,
          answer: synthesized,
          confidence: reflection.confidence.confidence,
          explanation: reflection.reflectionNote,
          factors: reflection.confidence.factors
      };
};

const handleSynthesize = () => {
    const task = prompt("Enter a task for quantum neurosymbolic synthesis:", "Quantum entanglement teleportation");
    if (task) {
        const result = neurosymbolicSynthesis(task);

       setSynthesisResult(
           <>
            <h3 className="text-xl font-bold mb-2 text-yellow-400 shadow-md">Quantum Neurosymbolic Synthesis Result:</h3>
            <p><strong>{result.prefix}</strong></p>
            <p className="answer text-yellow-400 text-xl">{result.answer}</p>
            <p><strong>Confidence:</strong> {result.confidence}</p>
            <p><strong>Reflection:</strong> {result.explanation}</p>
            <details>
                <summary>Confidence Factors</summary>
                <pre>{JSON.stringify(result.factors, null, 2)}</pre>
            </details>
          </>
       );
    }
};
  const updateStats = () => {
      setAwarenessFactor(calculateAwarenessFactor());
  };

return (
    <div className="bg-gradient-to-b from-gray-900 to-gray-800 text-gray-100 min-h-screen flex flex-col items-center p-4">
         <h1 className="text-3xl font-bold text-center text-yellow-400 mb-4 shadow-md">Cosmic Cajun AI Gumbo Simulator</h1>
        <div className="text-center text-xl italic text-yellow-500 mb-4">{cosmicMessage}</div>
        <div
            className="w-full max-w-5xl h-[60vh] bg-gradient-to-r from-gray-700 to-gray-900 rounded-2xl relative overflow-hidden shadow-2xl mb-4">

            {sequences.map((seq, index) => {
                   const style = {
                    backgroundColor: `hsl(${Math.random() * 360}, 70%, 50%)`,
                    left: seq.left || `${Math.random() * 90}%`,
                    top:  seq.top || `${Math.random() * 90}%`,
                    position: 'absolute',
                  };

                return (
                     <div key={index} className=" sequence text-xs p-1 rounded-md opacity-80 cursor-pointer whitespace-nowrap overflow-hidden text-ellipsis max-w-[150px] shadow-md" style={style} title={autoDocument(seq.content || seq)} >{seq.content || seq}</div>

                )
            })}
        </div>

        <div className="flex flex-wrap justify-center gap-2 mb-4">
            <button onClick={() => evolve(10)} className="bg-amber-700 hover:bg-amber-600 text-gray-100 font-medium py-2 px-4 rounded-md transition-colors shadow-md">
                Stir the Cosmic Gumbo
            </button>
            <button onClick={addNoise} className="bg-amber-700 hover:bg-amber-600 text-gray-100 font-medium py-2 px-4 rounded-md transition-colors shadow-md">
                Add Quantum Ingredient
            </button>
            <button onClick={findEmergentPatterns} className="bg-amber-700 hover:bg-amber-600 text-gray-100 font-medium py-2 px-4 rounded-md transition-colors shadow-md">
               Discover Emergent Flavors
            </button>
             <button onClick={handleSynthesize} className="bg-amber-700 hover:bg-amber-600 text-gray-100 font-medium py-2 px-4 rounded-md transition-colors shadow-md">
                Create a Quantum Dish
             </button>
        </div>

        <div className="bg-gray-800 bg-opacity-70 p-4 rounded-xl mb-4 text-center shadow-md">
             Quantum Ingredients: <span className="font-bold text-gray-300">{sequences.length}</span> |
             Cosmic Awareness Factor: <span className="font-bold text-gray-300">{awarenessFactor.toFixed(3)}</span> |
              Self-Awareness: <span className="font-bold text-gray-300">{selfAwareness.toFixed(3)}</span>
        </div>

        {emergentPatterns.length > 0 && (
            <div className="bg-gray-800 bg-opacity-70 p-4 rounded-xl mb-4 text-center max-w-full overflow-wrap-anywhere shadow-md">
                <h3 className="text-xl font-bold mb-2 text-yellow-400 shadow-md">Top 5 Emergent Quantum Patterns:</h3>
                {emergentPatterns.map((pattern, index) => (
                   <p key={index} className="text-gray-200"><small>{pattern}</small></p>
                ))}
            </div>
        )}


        {synthesisResult && (
            <div className="bg-gray-800 bg-opacity-70 p-4 rounded-xl mb-4 text-center shadow-md"> {synthesisResult} </div>

        )}

    </div>
);
};

export default CosmicCajunGumboSimulator;
